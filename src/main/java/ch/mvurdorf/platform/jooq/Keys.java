/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq;


import ch.mvurdorf.platform.jooq.tables.Document;
import ch.mvurdorf.platform.jooq.tables.InstrumentPermission;
import ch.mvurdorf.platform.jooq.tables.Komposition;
import ch.mvurdorf.platform.jooq.tables.Konzert;
import ch.mvurdorf.platform.jooq.tables.KonzertEntry;
import ch.mvurdorf.platform.jooq.tables.Login;
import ch.mvurdorf.platform.jooq.tables.NotenPdf;
import ch.mvurdorf.platform.jooq.tables.NotenPdfAssignment;
import ch.mvurdorf.platform.jooq.tables.Repertoire;
import ch.mvurdorf.platform.jooq.tables.RepertoireEntry;
import ch.mvurdorf.platform.jooq.tables.Supporter;
import ch.mvurdorf.platform.jooq.tables.SupporterPayment;
import ch.mvurdorf.platform.jooq.tables.SupporterVoucher;
import ch.mvurdorf.platform.jooq.tables.Voucher;
import ch.mvurdorf.platform.jooq.tables.records.DocumentRecord;
import ch.mvurdorf.platform.jooq.tables.records.InstrumentPermissionRecord;
import ch.mvurdorf.platform.jooq.tables.records.KompositionRecord;
import ch.mvurdorf.platform.jooq.tables.records.KonzertEntryRecord;
import ch.mvurdorf.platform.jooq.tables.records.KonzertRecord;
import ch.mvurdorf.platform.jooq.tables.records.LoginRecord;
import ch.mvurdorf.platform.jooq.tables.records.NotenPdfAssignmentRecord;
import ch.mvurdorf.platform.jooq.tables.records.NotenPdfRecord;
import ch.mvurdorf.platform.jooq.tables.records.RepertoireEntryRecord;
import ch.mvurdorf.platform.jooq.tables.records.RepertoireRecord;
import ch.mvurdorf.platform.jooq.tables.records.SupporterPaymentRecord;
import ch.mvurdorf.platform.jooq.tables.records.SupporterRecord;
import ch.mvurdorf.platform.jooq.tables.records.SupporterVoucherRecord;
import ch.mvurdorf.platform.jooq.tables.records.VoucherRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DocumentRecord> DOCUMENT_PKEY = Internal.createUniqueKey(Document.DOCUMENT, DSL.name("document_pkey"), new TableField[] { Document.DOCUMENT.ID }, true);
    public static final UniqueKey<InstrumentPermissionRecord> PK__INSTRUMENTS_PERMISSION = Internal.createUniqueKey(InstrumentPermission.INSTRUMENT_PERMISSION, DSL.name("pk__instruments_permission"), new TableField[] { InstrumentPermission.INSTRUMENT_PERMISSION.FK_LOGIN, InstrumentPermission.INSTRUMENT_PERMISSION.INSTRUMENT }, true);
    public static final UniqueKey<KompositionRecord> PK__KOMPOSITION = Internal.createUniqueKey(Komposition.KOMPOSITION, DSL.name("pk__komposition"), new TableField[] { Komposition.KOMPOSITION.ID }, true);
    public static final UniqueKey<KonzertRecord> PK__KONZERT = Internal.createUniqueKey(Konzert.KONZERT, DSL.name("pk__konzert"), new TableField[] { Konzert.KONZERT.ID }, true);
    public static final UniqueKey<KonzertEntryRecord> PK__KONZERT_ENTRY = Internal.createUniqueKey(KonzertEntry.KONZERT_ENTRY, DSL.name("pk__konzert_entry"), new TableField[] { KonzertEntry.KONZERT_ENTRY.ID }, true);
    public static final UniqueKey<LoginRecord> PK__LOGIN = Internal.createUniqueKey(Login.LOGIN, DSL.name("pk__login"), new TableField[] { Login.LOGIN.ID }, true);
    public static final UniqueKey<LoginRecord> UQ__LOGIN_EMAIL = Internal.createUniqueKey(Login.LOGIN, DSL.name("uq__login_email"), new TableField[] { Login.LOGIN.EMAIL }, true);
    public static final UniqueKey<NotenPdfRecord> PK__NOTEN = Internal.createUniqueKey(NotenPdf.NOTEN_PDF, DSL.name("pk__noten"), new TableField[] { NotenPdf.NOTEN_PDF.ID }, true);
    public static final UniqueKey<NotenPdfAssignmentRecord> PK__NOTEN_PDF_ASSIGNMENT = Internal.createUniqueKey(NotenPdfAssignment.NOTEN_PDF_ASSIGNMENT, DSL.name("pk__noten_pdf_assignment"), new TableField[] { NotenPdfAssignment.NOTEN_PDF_ASSIGNMENT.ID }, true);
    public static final UniqueKey<RepertoireRecord> PK__REPERTOIRE = Internal.createUniqueKey(Repertoire.REPERTOIRE, DSL.name("pk__repertoire"), new TableField[] { Repertoire.REPERTOIRE.ID }, true);
    public static final UniqueKey<RepertoireEntryRecord> PK__REPERTOIRE_ENTRY = Internal.createUniqueKey(RepertoireEntry.REPERTOIRE_ENTRY, DSL.name("pk__repertoire_entry"), new TableField[] { RepertoireEntry.REPERTOIRE_ENTRY.ID }, true);
    public static final UniqueKey<SupporterRecord> PASSIVMITGLIED_EMAIL_KEY = Internal.createUniqueKey(Supporter.SUPPORTER, DSL.name("passivmitglied_email_key"), new TableField[] { Supporter.SUPPORTER.EMAIL }, true);
    public static final UniqueKey<SupporterRecord> PK__PASSIVMITGLIED = Internal.createUniqueKey(Supporter.SUPPORTER, DSL.name("pk__passivmitglied"), new TableField[] { Supporter.SUPPORTER.ID }, true);
    public static final UniqueKey<SupporterPaymentRecord> PK__PASSIVMITGLIED_PAYMENT = Internal.createUniqueKey(SupporterPayment.SUPPORTER_PAYMENT, DSL.name("pk__passivmitglied_payment"), new TableField[] { SupporterPayment.SUPPORTER_PAYMENT.ID }, true);
    public static final UniqueKey<SupporterVoucherRecord> PK__PASSIVMITGLIED_VOUCHER = Internal.createUniqueKey(SupporterVoucher.SUPPORTER_VOUCHER, DSL.name("pk__passivmitglied_voucher"), new TableField[] { SupporterVoucher.SUPPORTER_VOUCHER.ID }, true);
    public static final UniqueKey<VoucherRecord> PK__VOUCHER = Internal.createUniqueKey(Voucher.VOUCHER, DSL.name("pk__voucher"), new TableField[] { Voucher.VOUCHER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<KonzertEntryRecord, KompositionRecord> KONZERT_ENTRY__KONZERT_ENTRY_FK_KOMPOSITION_FKEY = Internal.createForeignKey(KonzertEntry.KONZERT_ENTRY, DSL.name("konzert_entry_fk_komposition_fkey"), new TableField[] { KonzertEntry.KONZERT_ENTRY.FK_KOMPOSITION }, Keys.PK__KOMPOSITION, new TableField[] { Komposition.KOMPOSITION.ID }, true);
    public static final ForeignKey<KonzertEntryRecord, KonzertRecord> KONZERT_ENTRY__KONZERT_ENTRY_FK_KONZERT_FKEY = Internal.createForeignKey(KonzertEntry.KONZERT_ENTRY, DSL.name("konzert_entry_fk_konzert_fkey"), new TableField[] { KonzertEntry.KONZERT_ENTRY.FK_KONZERT }, Keys.PK__KONZERT, new TableField[] { Konzert.KONZERT.ID }, true);
    public static final ForeignKey<NotenPdfRecord, KompositionRecord> NOTEN_PDF__NOTEN_FK_KOMPOSITION_FKEY = Internal.createForeignKey(NotenPdf.NOTEN_PDF, DSL.name("noten_fk_komposition_fkey"), new TableField[] { NotenPdf.NOTEN_PDF.FK_KOMPOSITION }, Keys.PK__KOMPOSITION, new TableField[] { Komposition.KOMPOSITION.ID }, true);
    public static final ForeignKey<NotenPdfAssignmentRecord, NotenPdfRecord> NOTEN_PDF_ASSIGNMENT__FK__NOTEN_PDF_ASSIGNMENT = Internal.createForeignKey(NotenPdfAssignment.NOTEN_PDF_ASSIGNMENT, DSL.name("fk__noten_pdf_assignment"), new TableField[] { NotenPdfAssignment.NOTEN_PDF_ASSIGNMENT.FK_NOTEN_PDF }, Keys.PK__NOTEN, new TableField[] { NotenPdf.NOTEN_PDF.ID }, true);
    public static final ForeignKey<RepertoireEntryRecord, KompositionRecord> REPERTOIRE_ENTRY__REPERTOIRE_ENTRY_FK_KOMPOSITION_FKEY = Internal.createForeignKey(RepertoireEntry.REPERTOIRE_ENTRY, DSL.name("repertoire_entry_fk_komposition_fkey"), new TableField[] { RepertoireEntry.REPERTOIRE_ENTRY.FK_KOMPOSITION }, Keys.PK__KOMPOSITION, new TableField[] { Komposition.KOMPOSITION.ID }, true);
    public static final ForeignKey<RepertoireEntryRecord, RepertoireRecord> REPERTOIRE_ENTRY__REPERTOIRE_ENTRY_FK_REPERTOIRE_FKEY = Internal.createForeignKey(RepertoireEntry.REPERTOIRE_ENTRY, DSL.name("repertoire_entry_fk_repertoire_fkey"), new TableField[] { RepertoireEntry.REPERTOIRE_ENTRY.FK_REPERTOIRE }, Keys.PK__REPERTOIRE, new TableField[] { Repertoire.REPERTOIRE.ID }, true);
    public static final ForeignKey<SupporterPaymentRecord, SupporterRecord> SUPPORTER_PAYMENT__PASSIVMITGLIED_PAYMENT_FK_PASSIVMITGLIED_FKEY = Internal.createForeignKey(SupporterPayment.SUPPORTER_PAYMENT, DSL.name("passivmitglied_payment_fk_passivmitglied_fkey"), new TableField[] { SupporterPayment.SUPPORTER_PAYMENT.FK_SUPPORTER }, Keys.PK__PASSIVMITGLIED, new TableField[] { Supporter.SUPPORTER.ID }, true);
    public static final ForeignKey<SupporterVoucherRecord, SupporterRecord> SUPPORTER_VOUCHER__PASSIVMITGLIED_VOUCHER_FK_PASSIVMITGLIED_FKEY = Internal.createForeignKey(SupporterVoucher.SUPPORTER_VOUCHER, DSL.name("passivmitglied_voucher_fk_passivmitglied_fkey"), new TableField[] { SupporterVoucher.SUPPORTER_VOUCHER.FK_SUPPORTER }, Keys.PK__PASSIVMITGLIED, new TableField[] { Supporter.SUPPORTER.ID }, true);
}
