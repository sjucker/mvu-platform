/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq.tables;


import ch.mvurdorf.platform.jooq.Keys;
import ch.mvurdorf.platform.jooq.Public;
import ch.mvurdorf.platform.jooq.tables.NotenPdf.NotenPdfPath;
import ch.mvurdorf.platform.jooq.tables.records.NotenPdfAssignmentRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotenPdfAssignment extends TableImpl<NotenPdfAssignmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.noten_pdf_assignment</code>
     */
    public static final NotenPdfAssignment NOTEN_PDF_ASSIGNMENT = new NotenPdfAssignment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotenPdfAssignmentRecord> getRecordType() {
        return NotenPdfAssignmentRecord.class;
    }

    /**
     * The column <code>public.noten_pdf_assignment.id</code>.
     */
    public final TableField<NotenPdfAssignmentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.noten_pdf_assignment.fk_noten_pdf</code>.
     */
    public final TableField<NotenPdfAssignmentRecord, Long> FK_NOTEN_PDF = createField(DSL.name("fk_noten_pdf"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.noten_pdf_assignment.instrument</code>.
     */
    public final TableField<NotenPdfAssignmentRecord, String> INSTRUMENT = createField(DSL.name("instrument"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.noten_pdf_assignment.stimme</code>.
     */
    public final TableField<NotenPdfAssignmentRecord, String> STIMME = createField(DSL.name("stimme"), SQLDataType.VARCHAR(255), this, "");

    private NotenPdfAssignment(Name alias, Table<NotenPdfAssignmentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotenPdfAssignment(Name alias, Table<NotenPdfAssignmentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.noten_pdf_assignment</code> table
     * reference
     */
    public NotenPdfAssignment(String alias) {
        this(DSL.name(alias), NOTEN_PDF_ASSIGNMENT);
    }

    /**
     * Create an aliased <code>public.noten_pdf_assignment</code> table
     * reference
     */
    public NotenPdfAssignment(Name alias) {
        this(alias, NOTEN_PDF_ASSIGNMENT);
    }

    /**
     * Create a <code>public.noten_pdf_assignment</code> table reference
     */
    public NotenPdfAssignment() {
        this(DSL.name("noten_pdf_assignment"), null);
    }

    public <O extends Record> NotenPdfAssignment(Table<O> path, ForeignKey<O, NotenPdfAssignmentRecord> childPath, InverseForeignKey<O, NotenPdfAssignmentRecord> parentPath) {
        super(path, childPath, parentPath, NOTEN_PDF_ASSIGNMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NotenPdfAssignmentPath extends NotenPdfAssignment implements Path<NotenPdfAssignmentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NotenPdfAssignmentPath(Table<O> path, ForeignKey<O, NotenPdfAssignmentRecord> childPath, InverseForeignKey<O, NotenPdfAssignmentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotenPdfAssignmentPath(Name alias, Table<NotenPdfAssignmentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotenPdfAssignmentPath as(String alias) {
            return new NotenPdfAssignmentPath(DSL.name(alias), this);
        }

        @Override
        public NotenPdfAssignmentPath as(Name alias) {
            return new NotenPdfAssignmentPath(alias, this);
        }

        @Override
        public NotenPdfAssignmentPath as(Table<?> alias) {
            return new NotenPdfAssignmentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NotenPdfAssignmentRecord, Long> getIdentity() {
        return (Identity<NotenPdfAssignmentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotenPdfAssignmentRecord> getPrimaryKey() {
        return Keys.PK__NOTEN_PDF_ASSIGNMENT;
    }

    @Override
    public List<ForeignKey<NotenPdfAssignmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTEN_PDF_ASSIGNMENT__FK__NOTEN_PDF_ASSIGNMENT);
    }

    private transient NotenPdfPath _notenPdf;

    /**
     * Get the implicit join path to the <code>public.noten_pdf</code> table.
     */
    public NotenPdfPath notenPdf() {
        if (_notenPdf == null)
            _notenPdf = new NotenPdfPath(this, Keys.NOTEN_PDF_ASSIGNMENT__FK__NOTEN_PDF_ASSIGNMENT, null);

        return _notenPdf;
    }

    @Override
    public NotenPdfAssignment as(String alias) {
        return new NotenPdfAssignment(DSL.name(alias), this);
    }

    @Override
    public NotenPdfAssignment as(Name alias) {
        return new NotenPdfAssignment(alias, this);
    }

    @Override
    public NotenPdfAssignment as(Table<?> alias) {
        return new NotenPdfAssignment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotenPdfAssignment rename(String name) {
        return new NotenPdfAssignment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotenPdfAssignment rename(Name name) {
        return new NotenPdfAssignment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotenPdfAssignment rename(Table<?> name) {
        return new NotenPdfAssignment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotenPdfAssignment where(Condition condition) {
        return new NotenPdfAssignment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotenPdfAssignment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotenPdfAssignment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotenPdfAssignment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotenPdfAssignment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotenPdfAssignment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotenPdfAssignment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotenPdfAssignment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotenPdfAssignment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotenPdfAssignment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
