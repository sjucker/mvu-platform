/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq.tables;


import ch.mvurdorf.platform.jooq.Keys;
import ch.mvurdorf.platform.jooq.Public;
import ch.mvurdorf.platform.jooq.tables.Supporter.SupporterPath;
import ch.mvurdorf.platform.jooq.tables.records.SupporterPaymentRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SupporterPayment extends TableImpl<SupporterPaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.supporter_payment</code>
     */
    public static final SupporterPayment SUPPORTER_PAYMENT = new SupporterPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SupporterPaymentRecord> getRecordType() {
        return SupporterPaymentRecord.class;
    }

    /**
     * The column <code>public.supporter_payment.id</code>.
     */
    public final TableField<SupporterPaymentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.supporter_payment.fk_supporter</code>.
     */
    public final TableField<SupporterPaymentRecord, Long> FK_SUPPORTER = createField(DSL.name("fk_supporter"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.supporter_payment.datum</code>.
     */
    public final TableField<SupporterPaymentRecord, LocalDate> DATUM = createField(DSL.name("datum"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.supporter_payment.amount</code>.
     */
    public final TableField<SupporterPaymentRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(6, 2).nullable(false), this, "");

    /**
     * The column <code>public.supporter_payment.bemerkung</code>.
     */
    public final TableField<SupporterPaymentRecord, String> BEMERKUNG = createField(DSL.name("bemerkung"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.supporter_payment.created_at</code>.
     */
    public final TableField<SupporterPaymentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.supporter_payment.created_by</code>.
     */
    public final TableField<SupporterPaymentRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'System'::character varying"), SQLDataType.VARCHAR)), this, "");

    private SupporterPayment(Name alias, Table<SupporterPaymentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SupporterPayment(Name alias, Table<SupporterPaymentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.supporter_payment</code> table reference
     */
    public SupporterPayment(String alias) {
        this(DSL.name(alias), SUPPORTER_PAYMENT);
    }

    /**
     * Create an aliased <code>public.supporter_payment</code> table reference
     */
    public SupporterPayment(Name alias) {
        this(alias, SUPPORTER_PAYMENT);
    }

    /**
     * Create a <code>public.supporter_payment</code> table reference
     */
    public SupporterPayment() {
        this(DSL.name("supporter_payment"), null);
    }

    public <O extends Record> SupporterPayment(Table<O> path, ForeignKey<O, SupporterPaymentRecord> childPath, InverseForeignKey<O, SupporterPaymentRecord> parentPath) {
        super(path, childPath, parentPath, SUPPORTER_PAYMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SupporterPaymentPath extends SupporterPayment implements Path<SupporterPaymentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SupporterPaymentPath(Table<O> path, ForeignKey<O, SupporterPaymentRecord> childPath, InverseForeignKey<O, SupporterPaymentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SupporterPaymentPath(Name alias, Table<SupporterPaymentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SupporterPaymentPath as(String alias) {
            return new SupporterPaymentPath(DSL.name(alias), this);
        }

        @Override
        public SupporterPaymentPath as(Name alias) {
            return new SupporterPaymentPath(alias, this);
        }

        @Override
        public SupporterPaymentPath as(Table<?> alias) {
            return new SupporterPaymentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SupporterPaymentRecord, Long> getIdentity() {
        return (Identity<SupporterPaymentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SupporterPaymentRecord> getPrimaryKey() {
        return Keys.PK__PASSIVMITGLIED_PAYMENT;
    }

    @Override
    public List<ForeignKey<SupporterPaymentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUPPORTER_PAYMENT__PASSIVMITGLIED_PAYMENT_FK_PASSIVMITGLIED_FKEY);
    }

    private transient SupporterPath _supporter;

    /**
     * Get the implicit join path to the <code>public.supporter</code> table.
     */
    public SupporterPath supporter() {
        if (_supporter == null)
            _supporter = new SupporterPath(this, Keys.SUPPORTER_PAYMENT__PASSIVMITGLIED_PAYMENT_FK_PASSIVMITGLIED_FKEY, null);

        return _supporter;
    }

    @Override
    public SupporterPayment as(String alias) {
        return new SupporterPayment(DSL.name(alias), this);
    }

    @Override
    public SupporterPayment as(Name alias) {
        return new SupporterPayment(alias, this);
    }

    @Override
    public SupporterPayment as(Table<?> alias) {
        return new SupporterPayment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SupporterPayment rename(String name) {
        return new SupporterPayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SupporterPayment rename(Name name) {
        return new SupporterPayment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SupporterPayment rename(Table<?> name) {
        return new SupporterPayment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupporterPayment where(Condition condition) {
        return new SupporterPayment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupporterPayment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupporterPayment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupporterPayment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SupporterPayment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SupporterPayment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SupporterPayment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SupporterPayment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupporterPayment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupporterPayment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
