/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq.tables.daos;


import ch.mvurdorf.platform.jooq.AbstractSpringDAOImpl;
import ch.mvurdorf.platform.jooq.tables.Noten;
import ch.mvurdorf.platform.jooq.tables.records.NotenRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class NotenDao extends AbstractSpringDAOImpl<NotenRecord, ch.mvurdorf.platform.jooq.tables.pojos.Noten, Long> {

    /**
     * Create a new NotenDao without any configuration
     */
    public NotenDao() {
        super(Noten.NOTEN, ch.mvurdorf.platform.jooq.tables.pojos.Noten.class);
    }

    /**
     * Create a new NotenDao with an attached configuration
     */
    @Autowired
    public NotenDao(Configuration configuration) {
        super(Noten.NOTEN, ch.mvurdorf.platform.jooq.tables.pojos.Noten.class, configuration);
    }

    @Override
    public Long getId(ch.mvurdorf.platform.jooq.tables.pojos.Noten object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Noten> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Noten.NOTEN.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Noten> fetchById(Long... values) {
        return fetch(Noten.NOTEN.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ch.mvurdorf.platform.jooq.tables.pojos.Noten fetchOneById(Long value) {
        return fetchOne(Noten.NOTEN.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ch.mvurdorf.platform.jooq.tables.pojos.Noten> fetchOptionalById(Long value) {
        return fetchOptional(Noten.NOTEN.ID, value);
    }

    /**
     * Fetch records that have <code>fk_komposition BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Noten> fetchRangeOfFkKomposition(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Noten.NOTEN.FK_KOMPOSITION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_komposition IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Noten> fetchByFkKomposition(Long... values) {
        return fetch(Noten.NOTEN.FK_KOMPOSITION, values);
    }

    /**
     * Fetch records that have <code>instrument BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Noten> fetchRangeOfInstrument(String lowerInclusive, String upperInclusive) {
        return fetchRange(Noten.NOTEN.INSTRUMENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>instrument IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Noten> fetchByInstrument(String... values) {
        return fetch(Noten.NOTEN.INSTRUMENT, values);
    }

    /**
     * Fetch records that have <code>stimmlage BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Noten> fetchRangeOfStimmlage(String lowerInclusive, String upperInclusive) {
        return fetchRange(Noten.NOTEN.STIMMLAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stimmlage IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Noten> fetchByStimmlage(String... values) {
        return fetch(Noten.NOTEN.STIMMLAGE, values);
    }
}
