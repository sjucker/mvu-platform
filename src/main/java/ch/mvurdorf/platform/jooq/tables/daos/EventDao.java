/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq.tables.daos;


import ch.mvurdorf.platform.jooq.AbstractSpringDAOImpl;
import ch.mvurdorf.platform.jooq.tables.Event;
import ch.mvurdorf.platform.jooq.tables.records.EventRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class EventDao extends AbstractSpringDAOImpl<EventRecord, ch.mvurdorf.platform.jooq.tables.pojos.Event, Long> {

    /**
     * Create a new EventDao without any configuration
     */
    public EventDao() {
        super(Event.EVENT, ch.mvurdorf.platform.jooq.tables.pojos.Event.class);
    }

    /**
     * Create a new EventDao with an attached configuration
     */
    @Autowired
    public EventDao(Configuration configuration) {
        super(Event.EVENT, ch.mvurdorf.platform.jooq.tables.pojos.Event.class, configuration);
    }

    @Override
    public Long getId(ch.mvurdorf.platform.jooq.tables.pojos.Event object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Event.EVENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchById(Long... values) {
        return fetch(Event.EVENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ch.mvurdorf.platform.jooq.tables.pojos.Event fetchOneById(Long value) {
        return fetchOne(Event.EVENT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchOptionalById(Long value) {
        return fetchOptional(Event.EVENT.ID, value);
    }

    /**
     * Fetch records that have <code>from_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfFromDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Event.EVENT.FROM_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>from_date IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByFromDate(LocalDate... values) {
        return fetch(Event.EVENT.FROM_DATE, values);
    }

    /**
     * Fetch records that have <code>from_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfFromTime(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRange(Event.EVENT.FROM_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>from_time IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByFromTime(LocalTime... values) {
        return fetch(Event.EVENT.FROM_TIME, values);
    }

    /**
     * Fetch records that have <code>to_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfToDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Event.EVENT.TO_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>to_date IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByToDate(LocalDate... values) {
        return fetch(Event.EVENT.TO_DATE, values);
    }

    /**
     * Fetch records that have <code>to_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfToTime(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRange(Event.EVENT.TO_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>to_time IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByToTime(LocalTime... values) {
        return fetch(Event.EVENT.TO_TIME, values);
    }

    /**
     * Fetch records that have <code>approximately BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfApproximately(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Event.EVENT.APPROXIMATELY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>approximately IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByApproximately(Boolean... values) {
        return fetch(Event.EVENT.APPROXIMATELY, values);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Event.EVENT.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByTitle(String... values) {
        return fetch(Event.EVENT.TITLE, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Event.EVENT.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByDescription(String... values) {
        return fetch(Event.EVENT.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>location BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfLocation(String lowerInclusive, String upperInclusive) {
        return fetchRange(Event.EVENT.LOCATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>location IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByLocation(String... values) {
        return fetch(Event.EVENT.LOCATION, values);
    }

    /**
     * Fetch records that have <code>interna BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfInterna(String lowerInclusive, String upperInclusive) {
        return fetchRange(Event.EVENT.INTERNA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>interna IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByInterna(String... values) {
        return fetch(Event.EVENT.INTERNA, values);
    }

    /**
     * Fetch records that have <code>literature BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfLiterature(String lowerInclusive, String upperInclusive) {
        return fetchRange(Event.EVENT.LITERATURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>literature IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByLiterature(String... values) {
        return fetch(Event.EVENT.LITERATURE, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Event.EVENT.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByType(String... values) {
        return fetch(Event.EVENT.TYPE, values);
    }

    /**
     * Fetch records that have <code>relevant_for_absenz BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfRelevantForAbsenz(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Event.EVENT.RELEVANT_FOR_ABSENZ, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>relevant_for_absenz IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByRelevantForAbsenz(Boolean... values) {
        return fetch(Event.EVENT.RELEVANT_FOR_ABSENZ, values);
    }

    /**
     * Fetch records that have <code>relevant_for_website BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfRelevantForWebsite(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Event.EVENT.RELEVANT_FOR_WEBSITE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>relevant_for_website IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByRelevantForWebsite(Boolean... values) {
        return fetch(Event.EVENT.RELEVANT_FOR_WEBSITE, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Event.EVENT.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Event.EVENT.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(Event.EVENT.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByCreatedBy(String... values) {
        return fetch(Event.EVENT.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>deleted_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfDeletedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Event.EVENT.DELETED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleted_at IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByDeletedAt(LocalDateTime... values) {
        return fetch(Event.EVENT.DELETED_AT, values);
    }

    /**
     * Fetch records that have <code>next_version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchRangeOfNextVersion(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Event.EVENT.NEXT_VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_version IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Event> fetchByNextVersion(Long... values) {
        return fetch(Event.EVENT.NEXT_VERSION, values);
    }
}
