/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq.tables;


import ch.mvurdorf.platform.jooq.Keys;
import ch.mvurdorf.platform.jooq.Public;
import ch.mvurdorf.platform.jooq.tables.Passivmitglied.PassivmitgliedPath;
import ch.mvurdorf.platform.jooq.tables.records.PassivmitgliedVoucherRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PassivmitgliedVoucher extends TableImpl<PassivmitgliedVoucherRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.passivmitglied_voucher</code>
     */
    public static final PassivmitgliedVoucher PASSIVMITGLIED_VOUCHER = new PassivmitgliedVoucher();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PassivmitgliedVoucherRecord> getRecordType() {
        return PassivmitgliedVoucherRecord.class;
    }

    /**
     * The column <code>public.passivmitglied_voucher.id</code>.
     */
    public final TableField<PassivmitgliedVoucherRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.passivmitglied_voucher.fk_passivmitglied</code>.
     */
    public final TableField<PassivmitgliedVoucherRecord, Long> FK_PASSIVMITGLIED = createField(DSL.name("fk_passivmitglied"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.passivmitglied_voucher.code</code>.
     */
    public final TableField<PassivmitgliedVoucherRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.passivmitglied_voucher.description</code>.
     */
    public final TableField<PassivmitgliedVoucherRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.passivmitglied_voucher.valid_until</code>.
     */
    public final TableField<PassivmitgliedVoucherRecord, LocalDate> VALID_UNTIL = createField(DSL.name("valid_until"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.passivmitglied_voucher.redeemed_at</code>.
     */
    public final TableField<PassivmitgliedVoucherRecord, LocalDateTime> REDEEMED_AT = createField(DSL.name("redeemed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.passivmitglied_voucher.redeemed_by</code>.
     */
    public final TableField<PassivmitgliedVoucherRecord, String> REDEEMED_BY = createField(DSL.name("redeemed_by"), SQLDataType.VARCHAR(255), this, "");

    private PassivmitgliedVoucher(Name alias, Table<PassivmitgliedVoucherRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PassivmitgliedVoucher(Name alias, Table<PassivmitgliedVoucherRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.passivmitglied_voucher</code> table
     * reference
     */
    public PassivmitgliedVoucher(String alias) {
        this(DSL.name(alias), PASSIVMITGLIED_VOUCHER);
    }

    /**
     * Create an aliased <code>public.passivmitglied_voucher</code> table
     * reference
     */
    public PassivmitgliedVoucher(Name alias) {
        this(alias, PASSIVMITGLIED_VOUCHER);
    }

    /**
     * Create a <code>public.passivmitglied_voucher</code> table reference
     */
    public PassivmitgliedVoucher() {
        this(DSL.name("passivmitglied_voucher"), null);
    }

    public <O extends Record> PassivmitgliedVoucher(Table<O> path, ForeignKey<O, PassivmitgliedVoucherRecord> childPath, InverseForeignKey<O, PassivmitgliedVoucherRecord> parentPath) {
        super(path, childPath, parentPath, PASSIVMITGLIED_VOUCHER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PassivmitgliedVoucherPath extends PassivmitgliedVoucher implements Path<PassivmitgliedVoucherRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PassivmitgliedVoucherPath(Table<O> path, ForeignKey<O, PassivmitgliedVoucherRecord> childPath, InverseForeignKey<O, PassivmitgliedVoucherRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PassivmitgliedVoucherPath(Name alias, Table<PassivmitgliedVoucherRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PassivmitgliedVoucherPath as(String alias) {
            return new PassivmitgliedVoucherPath(DSL.name(alias), this);
        }

        @Override
        public PassivmitgliedVoucherPath as(Name alias) {
            return new PassivmitgliedVoucherPath(alias, this);
        }

        @Override
        public PassivmitgliedVoucherPath as(Table<?> alias) {
            return new PassivmitgliedVoucherPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PassivmitgliedVoucherRecord, Long> getIdentity() {
        return (Identity<PassivmitgliedVoucherRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PassivmitgliedVoucherRecord> getPrimaryKey() {
        return Keys.PK__PASSIVMITGLIED_VOUCHER;
    }

    @Override
    public List<ForeignKey<PassivmitgliedVoucherRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PASSIVMITGLIED_VOUCHER__PASSIVMITGLIED_VOUCHER_FK_PASSIVMITGLIED_FKEY);
    }

    private transient PassivmitgliedPath _passivmitglied;

    /**
     * Get the implicit join path to the <code>public.passivmitglied</code>
     * table.
     */
    public PassivmitgliedPath passivmitglied() {
        if (_passivmitglied == null)
            _passivmitglied = new PassivmitgliedPath(this, Keys.PASSIVMITGLIED_VOUCHER__PASSIVMITGLIED_VOUCHER_FK_PASSIVMITGLIED_FKEY, null);

        return _passivmitglied;
    }

    @Override
    public PassivmitgliedVoucher as(String alias) {
        return new PassivmitgliedVoucher(DSL.name(alias), this);
    }

    @Override
    public PassivmitgliedVoucher as(Name alias) {
        return new PassivmitgliedVoucher(alias, this);
    }

    @Override
    public PassivmitgliedVoucher as(Table<?> alias) {
        return new PassivmitgliedVoucher(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PassivmitgliedVoucher rename(String name) {
        return new PassivmitgliedVoucher(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PassivmitgliedVoucher rename(Name name) {
        return new PassivmitgliedVoucher(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PassivmitgliedVoucher rename(Table<?> name) {
        return new PassivmitgliedVoucher(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PassivmitgliedVoucher where(Condition condition) {
        return new PassivmitgliedVoucher(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PassivmitgliedVoucher where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PassivmitgliedVoucher where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PassivmitgliedVoucher where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PassivmitgliedVoucher where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PassivmitgliedVoucher where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PassivmitgliedVoucher where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PassivmitgliedVoucher where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PassivmitgliedVoucher whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PassivmitgliedVoucher whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
