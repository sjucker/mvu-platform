/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq.tables;


import ch.mvurdorf.platform.jooq.Keys;
import ch.mvurdorf.platform.jooq.Public;
import ch.mvurdorf.platform.jooq.tables.Komposition.KompositionPath;
import ch.mvurdorf.platform.jooq.tables.Repertoire.RepertoirePath;
import ch.mvurdorf.platform.jooq.tables.records.RepertoireEntryRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RepertoireEntry extends TableImpl<RepertoireEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.repertoire_entry</code>
     */
    public static final RepertoireEntry REPERTOIRE_ENTRY = new RepertoireEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RepertoireEntryRecord> getRecordType() {
        return RepertoireEntryRecord.class;
    }

    /**
     * The column <code>public.repertoire_entry.id</code>.
     */
    public final TableField<RepertoireEntryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.repertoire_entry.fk_repertoire</code>.
     */
    public final TableField<RepertoireEntryRecord, Long> FK_REPERTOIRE = createField(DSL.name("fk_repertoire"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.repertoire_entry.fk_komposition</code>.
     */
    public final TableField<RepertoireEntryRecord, Long> FK_KOMPOSITION = createField(DSL.name("fk_komposition"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.repertoire_entry.number</code>.
     */
    public final TableField<RepertoireEntryRecord, BigDecimal> NUMBER = createField(DSL.name("number"), SQLDataType.NUMERIC(3, 1), this, "");

    private RepertoireEntry(Name alias, Table<RepertoireEntryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RepertoireEntry(Name alias, Table<RepertoireEntryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.repertoire_entry</code> table reference
     */
    public RepertoireEntry(String alias) {
        this(DSL.name(alias), REPERTOIRE_ENTRY);
    }

    /**
     * Create an aliased <code>public.repertoire_entry</code> table reference
     */
    public RepertoireEntry(Name alias) {
        this(alias, REPERTOIRE_ENTRY);
    }

    /**
     * Create a <code>public.repertoire_entry</code> table reference
     */
    public RepertoireEntry() {
        this(DSL.name("repertoire_entry"), null);
    }

    public <O extends Record> RepertoireEntry(Table<O> path, ForeignKey<O, RepertoireEntryRecord> childPath, InverseForeignKey<O, RepertoireEntryRecord> parentPath) {
        super(path, childPath, parentPath, REPERTOIRE_ENTRY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RepertoireEntryPath extends RepertoireEntry implements Path<RepertoireEntryRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RepertoireEntryPath(Table<O> path, ForeignKey<O, RepertoireEntryRecord> childPath, InverseForeignKey<O, RepertoireEntryRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RepertoireEntryPath(Name alias, Table<RepertoireEntryRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RepertoireEntryPath as(String alias) {
            return new RepertoireEntryPath(DSL.name(alias), this);
        }

        @Override
        public RepertoireEntryPath as(Name alias) {
            return new RepertoireEntryPath(alias, this);
        }

        @Override
        public RepertoireEntryPath as(Table<?> alias) {
            return new RepertoireEntryPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RepertoireEntryRecord, Long> getIdentity() {
        return (Identity<RepertoireEntryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RepertoireEntryRecord> getPrimaryKey() {
        return Keys.PK__REPERTOIRE_ENTRY;
    }

    @Override
    public List<ForeignKey<RepertoireEntryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REPERTOIRE_ENTRY__REPERTOIRE_ENTRY_FK_KOMPOSITION_FKEY, Keys.REPERTOIRE_ENTRY__REPERTOIRE_ENTRY_FK_REPERTOIRE_FKEY);
    }

    private transient KompositionPath _komposition;

    /**
     * Get the implicit join path to the <code>public.komposition</code> table.
     */
    public KompositionPath komposition() {
        if (_komposition == null)
            _komposition = new KompositionPath(this, Keys.REPERTOIRE_ENTRY__REPERTOIRE_ENTRY_FK_KOMPOSITION_FKEY, null);

        return _komposition;
    }

    private transient RepertoirePath _repertoire;

    /**
     * Get the implicit join path to the <code>public.repertoire</code> table.
     */
    public RepertoirePath repertoire() {
        if (_repertoire == null)
            _repertoire = new RepertoirePath(this, Keys.REPERTOIRE_ENTRY__REPERTOIRE_ENTRY_FK_REPERTOIRE_FKEY, null);

        return _repertoire;
    }

    @Override
    public RepertoireEntry as(String alias) {
        return new RepertoireEntry(DSL.name(alias), this);
    }

    @Override
    public RepertoireEntry as(Name alias) {
        return new RepertoireEntry(alias, this);
    }

    @Override
    public RepertoireEntry as(Table<?> alias) {
        return new RepertoireEntry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RepertoireEntry rename(String name) {
        return new RepertoireEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RepertoireEntry rename(Name name) {
        return new RepertoireEntry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RepertoireEntry rename(Table<?> name) {
        return new RepertoireEntry(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RepertoireEntry where(Condition condition) {
        return new RepertoireEntry(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RepertoireEntry where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RepertoireEntry where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RepertoireEntry where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RepertoireEntry where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RepertoireEntry where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RepertoireEntry where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RepertoireEntry where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RepertoireEntry whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RepertoireEntry whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
