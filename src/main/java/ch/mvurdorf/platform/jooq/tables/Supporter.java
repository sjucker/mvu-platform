/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq.tables;


import ch.mvurdorf.platform.jooq.Keys;
import ch.mvurdorf.platform.jooq.Public;
import ch.mvurdorf.platform.jooq.tables.SupporterPayment.SupporterPaymentPath;
import ch.mvurdorf.platform.jooq.tables.SupporterVoucher.SupporterVoucherPath;
import ch.mvurdorf.platform.jooq.tables.records.SupporterRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Supporter extends TableImpl<SupporterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.supporter</code>
     */
    public static final Supporter SUPPORTER = new Supporter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SupporterRecord> getRecordType() {
        return SupporterRecord.class;
    }

    /**
     * The column <code>public.supporter.id</code>.
     */
    public final TableField<SupporterRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.supporter.vorname</code>.
     */
    public final TableField<SupporterRecord, String> VORNAME = createField(DSL.name("vorname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.supporter.nachname</code>.
     */
    public final TableField<SupporterRecord, String> NACHNAME = createField(DSL.name("nachname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.supporter.strasse</code>.
     */
    public final TableField<SupporterRecord, String> STRASSE = createField(DSL.name("strasse"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.supporter.ort</code>.
     */
    public final TableField<SupporterRecord, String> ORT = createField(DSL.name("ort"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.supporter.email</code>.
     */
    public final TableField<SupporterRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.supporter.bemerkung</code>.
     */
    public final TableField<SupporterRecord, String> BEMERKUNG = createField(DSL.name("bemerkung"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.supporter.kommunikation_post</code>.
     */
    public final TableField<SupporterRecord, Boolean> KOMMUNIKATION_POST = createField(DSL.name("kommunikation_post"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.supporter.kommunikation_email</code>.
     */
    public final TableField<SupporterRecord, Boolean> KOMMUNIKATION_EMAIL = createField(DSL.name("kommunikation_email"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.supporter.registered_at</code>.
     */
    public final TableField<SupporterRecord, LocalDateTime> REGISTERED_AT = createField(DSL.name("registered_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.supporter.external_id</code>.
     */
    public final TableField<SupporterRecord, Long> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.supporter.anrede</code>.
     */
    public final TableField<SupporterRecord, String> ANREDE = createField(DSL.name("anrede"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("''::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.supporter.uuid</code>.
     */
    public final TableField<SupporterRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("''::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.supporter.plz</code>.
     */
    public final TableField<SupporterRecord, String> PLZ = createField(DSL.name("plz"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.field(DSL.raw("''::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.supporter.strasse_nr</code>.
     */
    public final TableField<SupporterRecord, String> STRASSE_NR = createField(DSL.name("strasse_nr"), SQLDataType.VARCHAR(5).nullable(false).defaultValue(DSL.field(DSL.raw("''::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.supporter.country_code</code>.
     */
    public final TableField<SupporterRecord, String> COUNTRY_CODE = createField(DSL.name("country_code"), SQLDataType.VARCHAR(2).nullable(false).defaultValue(DSL.field(DSL.raw("'CH'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.supporter.type</code>.
     */
    public final TableField<SupporterRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'PASSIVMITGLIED'::character varying"), SQLDataType.VARCHAR)), this, "");

    private Supporter(Name alias, Table<SupporterRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Supporter(Name alias, Table<SupporterRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.supporter</code> table reference
     */
    public Supporter(String alias) {
        this(DSL.name(alias), SUPPORTER);
    }

    /**
     * Create an aliased <code>public.supporter</code> table reference
     */
    public Supporter(Name alias) {
        this(alias, SUPPORTER);
    }

    /**
     * Create a <code>public.supporter</code> table reference
     */
    public Supporter() {
        this(DSL.name("supporter"), null);
    }

    public <O extends Record> Supporter(Table<O> path, ForeignKey<O, SupporterRecord> childPath, InverseForeignKey<O, SupporterRecord> parentPath) {
        super(path, childPath, parentPath, SUPPORTER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SupporterPath extends Supporter implements Path<SupporterRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SupporterPath(Table<O> path, ForeignKey<O, SupporterRecord> childPath, InverseForeignKey<O, SupporterRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SupporterPath(Name alias, Table<SupporterRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SupporterPath as(String alias) {
            return new SupporterPath(DSL.name(alias), this);
        }

        @Override
        public SupporterPath as(Name alias) {
            return new SupporterPath(alias, this);
        }

        @Override
        public SupporterPath as(Table<?> alias) {
            return new SupporterPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SupporterRecord, Long> getIdentity() {
        return (Identity<SupporterRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SupporterRecord> getPrimaryKey() {
        return Keys.PK__PASSIVMITGLIED;
    }

    @Override
    public List<UniqueKey<SupporterRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PASSIVMITGLIED_EMAIL_KEY);
    }

    private transient SupporterPaymentPath _supporterPayment;

    /**
     * Get the implicit to-many join path to the
     * <code>public.supporter_payment</code> table
     */
    public SupporterPaymentPath supporterPayment() {
        if (_supporterPayment == null)
            _supporterPayment = new SupporterPaymentPath(this, null, Keys.SUPPORTER_PAYMENT__PASSIVMITGLIED_PAYMENT_FK_PASSIVMITGLIED_FKEY.getInverseKey());

        return _supporterPayment;
    }

    private transient SupporterVoucherPath _supporterVoucher;

    /**
     * Get the implicit to-many join path to the
     * <code>public.supporter_voucher</code> table
     */
    public SupporterVoucherPath supporterVoucher() {
        if (_supporterVoucher == null)
            _supporterVoucher = new SupporterVoucherPath(this, null, Keys.SUPPORTER_VOUCHER__PASSIVMITGLIED_VOUCHER_FK_PASSIVMITGLIED_FKEY.getInverseKey());

        return _supporterVoucher;
    }

    @Override
    public Supporter as(String alias) {
        return new Supporter(DSL.name(alias), this);
    }

    @Override
    public Supporter as(Name alias) {
        return new Supporter(alias, this);
    }

    @Override
    public Supporter as(Table<?> alias) {
        return new Supporter(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Supporter rename(String name) {
        return new Supporter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Supporter rename(Name name) {
        return new Supporter(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Supporter rename(Table<?> name) {
        return new Supporter(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supporter where(Condition condition) {
        return new Supporter(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supporter where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supporter where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supporter where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supporter where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supporter where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supporter where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supporter where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supporter whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supporter whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
