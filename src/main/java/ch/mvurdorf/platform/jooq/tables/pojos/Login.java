/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Login implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private String email;
    private String name;
    private Boolean active;
    private LocalDateTime lastLogin;
    private String usersPermission;
    private String notenPermission;
    private String supporterPermission;
    private String konzertePermission;
    private String repertoirePermission;
    private String eventPermission;
    private String absenzenPermission;
    private String register;
    private String fcmToken;

    public Login() {}

    public Login(Login value) {
        this.id = value.id;
        this.email = value.email;
        this.name = value.name;
        this.active = value.active;
        this.lastLogin = value.lastLogin;
        this.usersPermission = value.usersPermission;
        this.notenPermission = value.notenPermission;
        this.supporterPermission = value.supporterPermission;
        this.konzertePermission = value.konzertePermission;
        this.repertoirePermission = value.repertoirePermission;
        this.eventPermission = value.eventPermission;
        this.absenzenPermission = value.absenzenPermission;
        this.register = value.register;
        this.fcmToken = value.fcmToken;
    }

    public Login(
        Long id,
        String email,
        String name,
        Boolean active,
        LocalDateTime lastLogin,
        String usersPermission,
        String notenPermission,
        String supporterPermission,
        String konzertePermission,
        String repertoirePermission,
        String eventPermission,
        String absenzenPermission,
        String register,
        String fcmToken
    ) {
        this.id = id;
        this.email = email;
        this.name = name;
        this.active = active;
        this.lastLogin = lastLogin;
        this.usersPermission = usersPermission;
        this.notenPermission = notenPermission;
        this.supporterPermission = supporterPermission;
        this.konzertePermission = konzertePermission;
        this.repertoirePermission = repertoirePermission;
        this.eventPermission = eventPermission;
        this.absenzenPermission = absenzenPermission;
        this.register = register;
        this.fcmToken = fcmToken;
    }

    /**
     * Getter for <code>public.login.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.login.id</code>.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>public.login.email</code>.
     */
    public String getEmail() {
        return this.email;
    }

    /**
     * Setter for <code>public.login.email</code>.
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Getter for <code>public.login.name</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>public.login.name</code>.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for <code>public.login.active</code>.
     */
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>public.login.active</code>.
     */
    public void setActive(Boolean active) {
        this.active = active;
    }

    /**
     * Getter for <code>public.login.last_login</code>.
     */
    public LocalDateTime getLastLogin() {
        return this.lastLogin;
    }

    /**
     * Setter for <code>public.login.last_login</code>.
     */
    public void setLastLogin(LocalDateTime lastLogin) {
        this.lastLogin = lastLogin;
    }

    /**
     * Getter for <code>public.login.users_permission</code>.
     */
    public String getUsersPermission() {
        return this.usersPermission;
    }

    /**
     * Setter for <code>public.login.users_permission</code>.
     */
    public void setUsersPermission(String usersPermission) {
        this.usersPermission = usersPermission;
    }

    /**
     * Getter for <code>public.login.noten_permission</code>.
     */
    public String getNotenPermission() {
        return this.notenPermission;
    }

    /**
     * Setter for <code>public.login.noten_permission</code>.
     */
    public void setNotenPermission(String notenPermission) {
        this.notenPermission = notenPermission;
    }

    /**
     * Getter for <code>public.login.supporter_permission</code>.
     */
    public String getSupporterPermission() {
        return this.supporterPermission;
    }

    /**
     * Setter for <code>public.login.supporter_permission</code>.
     */
    public void setSupporterPermission(String supporterPermission) {
        this.supporterPermission = supporterPermission;
    }

    /**
     * Getter for <code>public.login.konzerte_permission</code>.
     */
    public String getKonzertePermission() {
        return this.konzertePermission;
    }

    /**
     * Setter for <code>public.login.konzerte_permission</code>.
     */
    public void setKonzertePermission(String konzertePermission) {
        this.konzertePermission = konzertePermission;
    }

    /**
     * Getter for <code>public.login.repertoire_permission</code>.
     */
    public String getRepertoirePermission() {
        return this.repertoirePermission;
    }

    /**
     * Setter for <code>public.login.repertoire_permission</code>.
     */
    public void setRepertoirePermission(String repertoirePermission) {
        this.repertoirePermission = repertoirePermission;
    }

    /**
     * Getter for <code>public.login.event_permission</code>.
     */
    public String getEventPermission() {
        return this.eventPermission;
    }

    /**
     * Setter for <code>public.login.event_permission</code>.
     */
    public void setEventPermission(String eventPermission) {
        this.eventPermission = eventPermission;
    }

    /**
     * Getter for <code>public.login.absenzen_permission</code>.
     */
    public String getAbsenzenPermission() {
        return this.absenzenPermission;
    }

    /**
     * Setter for <code>public.login.absenzen_permission</code>.
     */
    public void setAbsenzenPermission(String absenzenPermission) {
        this.absenzenPermission = absenzenPermission;
    }

    /**
     * Getter for <code>public.login.register</code>.
     */
    public String getRegister() {
        return this.register;
    }

    /**
     * Setter for <code>public.login.register</code>.
     */
    public void setRegister(String register) {
        this.register = register;
    }

    /**
     * Getter for <code>public.login.fcm_token</code>.
     */
    public String getFcmToken() {
        return this.fcmToken;
    }

    /**
     * Setter for <code>public.login.fcm_token</code>.
     */
    public void setFcmToken(String fcmToken) {
        this.fcmToken = fcmToken;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Login other = (Login) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.email == null) {
            if (other.email != null)
                return false;
        }
        else if (!this.email.equals(other.email))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.lastLogin == null) {
            if (other.lastLogin != null)
                return false;
        }
        else if (!this.lastLogin.equals(other.lastLogin))
            return false;
        if (this.usersPermission == null) {
            if (other.usersPermission != null)
                return false;
        }
        else if (!this.usersPermission.equals(other.usersPermission))
            return false;
        if (this.notenPermission == null) {
            if (other.notenPermission != null)
                return false;
        }
        else if (!this.notenPermission.equals(other.notenPermission))
            return false;
        if (this.supporterPermission == null) {
            if (other.supporterPermission != null)
                return false;
        }
        else if (!this.supporterPermission.equals(other.supporterPermission))
            return false;
        if (this.konzertePermission == null) {
            if (other.konzertePermission != null)
                return false;
        }
        else if (!this.konzertePermission.equals(other.konzertePermission))
            return false;
        if (this.repertoirePermission == null) {
            if (other.repertoirePermission != null)
                return false;
        }
        else if (!this.repertoirePermission.equals(other.repertoirePermission))
            return false;
        if (this.eventPermission == null) {
            if (other.eventPermission != null)
                return false;
        }
        else if (!this.eventPermission.equals(other.eventPermission))
            return false;
        if (this.absenzenPermission == null) {
            if (other.absenzenPermission != null)
                return false;
        }
        else if (!this.absenzenPermission.equals(other.absenzenPermission))
            return false;
        if (this.register == null) {
            if (other.register != null)
                return false;
        }
        else if (!this.register.equals(other.register))
            return false;
        if (this.fcmToken == null) {
            if (other.fcmToken != null)
                return false;
        }
        else if (!this.fcmToken.equals(other.fcmToken))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.email == null) ? 0 : this.email.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.lastLogin == null) ? 0 : this.lastLogin.hashCode());
        result = prime * result + ((this.usersPermission == null) ? 0 : this.usersPermission.hashCode());
        result = prime * result + ((this.notenPermission == null) ? 0 : this.notenPermission.hashCode());
        result = prime * result + ((this.supporterPermission == null) ? 0 : this.supporterPermission.hashCode());
        result = prime * result + ((this.konzertePermission == null) ? 0 : this.konzertePermission.hashCode());
        result = prime * result + ((this.repertoirePermission == null) ? 0 : this.repertoirePermission.hashCode());
        result = prime * result + ((this.eventPermission == null) ? 0 : this.eventPermission.hashCode());
        result = prime * result + ((this.absenzenPermission == null) ? 0 : this.absenzenPermission.hashCode());
        result = prime * result + ((this.register == null) ? 0 : this.register.hashCode());
        result = prime * result + ((this.fcmToken == null) ? 0 : this.fcmToken.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Login (");

        sb.append(id);
        sb.append(", ").append(email);
        sb.append(", ").append(name);
        sb.append(", ").append(active);
        sb.append(", ").append(lastLogin);
        sb.append(", ").append(usersPermission);
        sb.append(", ").append(notenPermission);
        sb.append(", ").append(supporterPermission);
        sb.append(", ").append(konzertePermission);
        sb.append(", ").append(repertoirePermission);
        sb.append(", ").append(eventPermission);
        sb.append(", ").append(absenzenPermission);
        sb.append(", ").append(register);
        sb.append(", ").append(fcmToken);

        sb.append(")");
        return sb.toString();
    }
}
