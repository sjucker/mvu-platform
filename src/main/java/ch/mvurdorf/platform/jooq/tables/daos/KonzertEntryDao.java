/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq.tables.daos;


import ch.mvurdorf.platform.jooq.AbstractSpringDAOImpl;
import ch.mvurdorf.platform.jooq.tables.KonzertEntry;
import ch.mvurdorf.platform.jooq.tables.records.KonzertEntryRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class KonzertEntryDao extends AbstractSpringDAOImpl<KonzertEntryRecord, ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry, Long> {

    /**
     * Create a new KonzertEntryDao without any configuration
     */
    public KonzertEntryDao() {
        super(KonzertEntry.KONZERT_ENTRY, ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry.class);
    }

    /**
     * Create a new KonzertEntryDao with an attached configuration
     */
    @Autowired
    public KonzertEntryDao(Configuration configuration) {
        super(KonzertEntry.KONZERT_ENTRY, ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry.class, configuration);
    }

    @Override
    public Long getId(ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(KonzertEntry.KONZERT_ENTRY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry> fetchById(Long... values) {
        return fetch(KonzertEntry.KONZERT_ENTRY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry fetchOneById(Long value) {
        return fetchOne(KonzertEntry.KONZERT_ENTRY.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry> fetchOptionalById(Long value) {
        return fetchOptional(KonzertEntry.KONZERT_ENTRY.ID, value);
    }

    /**
     * Fetch records that have <code>fk_konzert BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry> fetchRangeOfFkKonzert(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(KonzertEntry.KONZERT_ENTRY.FK_KONZERT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_konzert IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry> fetchByFkKonzert(Long... values) {
        return fetch(KonzertEntry.KONZERT_ENTRY.FK_KONZERT, values);
    }

    /**
     * Fetch records that have <code>index BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry> fetchRangeOfIndex(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(KonzertEntry.KONZERT_ENTRY.INDEX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>index IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry> fetchByIndex(Integer... values) {
        return fetch(KonzertEntry.KONZERT_ENTRY.INDEX, values);
    }

    /**
     * Fetch records that have <code>fk_komposition BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry> fetchRangeOfFkKomposition(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(KonzertEntry.KONZERT_ENTRY.FK_KOMPOSITION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_komposition IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry> fetchByFkKomposition(Long... values) {
        return fetch(KonzertEntry.KONZERT_ENTRY.FK_KOMPOSITION, values);
    }

    /**
     * Fetch records that have <code>placeholder BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry> fetchRangeOfPlaceholder(String lowerInclusive, String upperInclusive) {
        return fetchRange(KonzertEntry.KONZERT_ENTRY.PLACEHOLDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>placeholder IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.KonzertEntry> fetchByPlaceholder(String... values) {
        return fetch(KonzertEntry.KONZERT_ENTRY.PLACEHOLDER, values);
    }
}
