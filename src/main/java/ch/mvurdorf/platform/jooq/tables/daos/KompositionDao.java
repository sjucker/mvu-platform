/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq.tables.daos;


import ch.mvurdorf.platform.jooq.AbstractSpringDAOImpl;
import ch.mvurdorf.platform.jooq.tables.Komposition;
import ch.mvurdorf.platform.jooq.tables.records.KompositionRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class KompositionDao extends AbstractSpringDAOImpl<KompositionRecord, ch.mvurdorf.platform.jooq.tables.pojos.Komposition, Long> {

    /**
     * Create a new KompositionDao without any configuration
     */
    public KompositionDao() {
        super(Komposition.KOMPOSITION, ch.mvurdorf.platform.jooq.tables.pojos.Komposition.class);
    }

    /**
     * Create a new KompositionDao with an attached configuration
     */
    @Autowired
    public KompositionDao(Configuration configuration) {
        super(Komposition.KOMPOSITION, ch.mvurdorf.platform.jooq.tables.pojos.Komposition.class, configuration);
    }

    @Override
    public Long getId(ch.mvurdorf.platform.jooq.tables.pojos.Komposition object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Komposition> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Komposition.KOMPOSITION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Komposition> fetchById(Long... values) {
        return fetch(Komposition.KOMPOSITION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ch.mvurdorf.platform.jooq.tables.pojos.Komposition fetchOneById(Long value) {
        return fetchOne(Komposition.KOMPOSITION.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ch.mvurdorf.platform.jooq.tables.pojos.Komposition> fetchOptionalById(Long value) {
        return fetchOptional(Komposition.KOMPOSITION.ID, value);
    }

    /**
     * Fetch records that have <code>titel BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Komposition> fetchRangeOfTitel(String lowerInclusive, String upperInclusive) {
        return fetchRange(Komposition.KOMPOSITION.TITEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>titel IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Komposition> fetchByTitel(String... values) {
        return fetch(Komposition.KOMPOSITION.TITEL, values);
    }

    /**
     * Fetch records that have <code>komponist BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Komposition> fetchRangeOfKomponist(String lowerInclusive, String upperInclusive) {
        return fetchRange(Komposition.KOMPOSITION.KOMPONIST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>komponist IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Komposition> fetchByKomponist(String... values) {
        return fetch(Komposition.KOMPOSITION.KOMPONIST, values);
    }

    /**
     * Fetch records that have <code>arrangeur BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Komposition> fetchRangeOfArrangeur(String lowerInclusive, String upperInclusive) {
        return fetchRange(Komposition.KOMPOSITION.ARRANGEUR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>arrangeur IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Komposition> fetchByArrangeur(String... values) {
        return fetch(Komposition.KOMPOSITION.ARRANGEUR, values);
    }

    /**
     * Fetch records that have <code>format BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Komposition> fetchRangeOfFormat(String lowerInclusive, String upperInclusive) {
        return fetchRange(Komposition.KOMPOSITION.FORMAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>format IN (values)</code>
     */
    public List<ch.mvurdorf.platform.jooq.tables.pojos.Komposition> fetchByFormat(String... values) {
        return fetch(Komposition.KOMPOSITION.FORMAT, values);
    }
}
