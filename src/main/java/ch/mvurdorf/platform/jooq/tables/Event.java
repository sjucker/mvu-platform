/*
 * This file is generated by jOOQ.
 */
package ch.mvurdorf.platform.jooq.tables;


import ch.mvurdorf.platform.jooq.Keys;
import ch.mvurdorf.platform.jooq.Public;
import ch.mvurdorf.platform.jooq.tables.AbsenzStatus.AbsenzStatusPath;
import ch.mvurdorf.platform.jooq.tables.Event.EventPath;
import ch.mvurdorf.platform.jooq.tables.Login.LoginPath;
import ch.mvurdorf.platform.jooq.tables.records.EventRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Event extends TableImpl<EventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.event</code>
     */
    public static final Event EVENT = new Event();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventRecord> getRecordType() {
        return EventRecord.class;
    }

    /**
     * The column <code>public.event.id</code>.
     */
    public final TableField<EventRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.event.from_date</code>.
     */
    public final TableField<EventRecord, LocalDate> FROM_DATE = createField(DSL.name("from_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.event.from_time</code>.
     */
    public final TableField<EventRecord, LocalTime> FROM_TIME = createField(DSL.name("from_time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public.event.to_date</code>.
     */
    public final TableField<EventRecord, LocalDate> TO_DATE = createField(DSL.name("to_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.event.to_time</code>.
     */
    public final TableField<EventRecord, LocalTime> TO_TIME = createField(DSL.name("to_time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public.event.approximately</code>.
     */
    public final TableField<EventRecord, Boolean> APPROXIMATELY = createField(DSL.name("approximately"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.event.title</code>.
     */
    public final TableField<EventRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.event.description</code>.
     */
    public final TableField<EventRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.event.location</code>.
     */
    public final TableField<EventRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.event.interna</code>.
     */
    public final TableField<EventRecord, String> INTERNA = createField(DSL.name("interna"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.event.literature</code>.
     */
    public final TableField<EventRecord, String> LITERATURE = createField(DSL.name("literature"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.event.type</code>.
     */
    public final TableField<EventRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.event.relevant_for_absenz</code>.
     */
    public final TableField<EventRecord, Boolean> RELEVANT_FOR_ABSENZ = createField(DSL.name("relevant_for_absenz"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.event.relevant_for_website</code>.
     */
    public final TableField<EventRecord, Boolean> RELEVANT_FOR_WEBSITE = createField(DSL.name("relevant_for_website"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.event.created_at</code>.
     */
    public final TableField<EventRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.event.created_by</code>.
     */
    public final TableField<EventRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'system'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.event.deleted_at</code>.
     */
    public final TableField<EventRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.event.next_version</code>.
     */
    public final TableField<EventRecord, Long> NEXT_VERSION = createField(DSL.name("next_version"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.event.updated_at</code>.
     */
    public final TableField<EventRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.event.updated_by</code>.
     */
    public final TableField<EventRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(255), this, "");

    private Event(Name alias, Table<EventRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Event(Name alias, Table<EventRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.event</code> table reference
     */
    public Event(String alias) {
        this(DSL.name(alias), EVENT);
    }

    /**
     * Create an aliased <code>public.event</code> table reference
     */
    public Event(Name alias) {
        this(alias, EVENT);
    }

    /**
     * Create a <code>public.event</code> table reference
     */
    public Event() {
        this(DSL.name("event"), null);
    }

    public <O extends Record> Event(Table<O> path, ForeignKey<O, EventRecord> childPath, InverseForeignKey<O, EventRecord> parentPath) {
        super(path, childPath, parentPath, EVENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EventPath extends Event implements Path<EventRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EventPath(Table<O> path, ForeignKey<O, EventRecord> childPath, InverseForeignKey<O, EventRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EventPath(Name alias, Table<EventRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EventPath as(String alias) {
            return new EventPath(DSL.name(alias), this);
        }

        @Override
        public EventPath as(Name alias) {
            return new EventPath(alias, this);
        }

        @Override
        public EventPath as(Table<?> alias) {
            return new EventPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EventRecord, Long> getIdentity() {
        return (Identity<EventRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventRecord> getPrimaryKey() {
        return Keys.PK__EVENT;
    }

    @Override
    public List<ForeignKey<EventRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVENT__FK__EVENT_VERSION);
    }

    private transient EventPath _event;

    /**
     * Get the implicit join path to the <code>public.event</code> table.
     */
    public EventPath event() {
        if (_event == null)
            _event = new EventPath(this, Keys.EVENT__FK__EVENT_VERSION, null);

        return _event;
    }

    private transient AbsenzStatusPath _absenzStatus;

    /**
     * Get the implicit to-many join path to the
     * <code>public.absenz_status</code> table
     */
    public AbsenzStatusPath absenzStatus() {
        if (_absenzStatus == null)
            _absenzStatus = new AbsenzStatusPath(this, null, Keys.ABSENZ_STATUS__FK__ABSENZ_STATUS_EVENT.getInverseKey());

        return _absenzStatus;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.login</code>
     * table
     */
    public LoginPath login() {
        return absenzStatus().login();
    }

    @Override
    public Event as(String alias) {
        return new Event(DSL.name(alias), this);
    }

    @Override
    public Event as(Name alias) {
        return new Event(alias, this);
    }

    @Override
    public Event as(Table<?> alias) {
        return new Event(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(String name) {
        return new Event(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(Name name) {
        return new Event(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(Table<?> name) {
        return new Event(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Condition condition) {
        return new Event(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Event where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Event whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
